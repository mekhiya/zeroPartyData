// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

interface IVerifier {
    function verifyProof(
        uint256[2] memory a,
        uint256[2][2] memory b,
        uint256[2] memory c,
        uint256[4] memory input
    ) external view returns (bool);
}

contract ZeroPartyData {
    event OfferEligibilityVerfied(address indexed person, bool indexed verfied);

    address public verifierAddr;
    mapping(address => bool) public addressMapping;

    IVerifier zkVerfier;

    constructor(address _verifierAddr) {
        zkVerfier = IVerifier(_verifierAddr);
    }

    // verify proof using Verifier.sol generated autogenerated by snark js
    function verifyUsingGroth(
        uint256[2] memory a,
        uint256[2][2] memory b,
        uint256[2] memory c,
        uint256[4] memory input
    ) public {
        require(
            zkVerfier.verifyProof(a, b, c, input),
            "Not Eligible for membership offer"
        );
        addressMapping[msg.sender] = true;
        emit OfferEligibilityVerfied(msg.sender, true);
    }

    function getVerficationStatus(address _user) public view returns (bool) {
        return addressMapping[_user];
    }

    // use to reset the verification for demo purpose
    function setVerficationStatus(bool _status) public {
        addressMapping[msg.sender] = _status;
        emit OfferEligibilityVerfied(msg.sender, _status);
    }
}
